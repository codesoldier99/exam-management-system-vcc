# 优化版Dockerfile - 使用国内镜像源加速构建
FROM node:18-alpine AS backend-builder

# 使用阿里云镜像源加速apk包下载
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# Install system dependencies needed for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    sqlite \
    sqlite-dev \
    pkgconfig

# Set working directory for backend
WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./

# 配置npm镜像源（兼容npm 9+）
RUN echo "registry=https://registry.npmmirror.com" > .npmrc && \
    echo "dist-url=https://npmmirror.com/mirrors/node" >> .npmrc && \
    echo "sass_binary_site=https://npmmirror.com/mirrors/node-sass" >> .npmrc && \
    echo "electron_mirror=https://npmmirror.com/mirrors/electron/" >> .npmrc && \
    echo "puppeteer_download_host=https://npmmirror.com/mirrors" >> .npmrc && \
    echo "chromedriver_cdnurl=https://npmmirror.com/mirrors/chromedriver" >> .npmrc && \
    echo "operadriver_cdnurl=https://npmmirror.com/mirrors/operadriver" >> .npmrc && \
    echo "phantomjs_cdnurl=https://npmmirror.com/mirrors/phantomjs" >> .npmrc && \
    echo "selenium_cdnurl=https://npmmirror.com/mirrors/selenium" >> .npmrc && \
    echo "node_inspector_cdnurl=https://npmmirror.com/mirrors/node-inspector" >> .npmrc && \
    echo "sqlite3_binary_site=https://npmmirror.com/mirrors/sqlite3" >> .npmrc && \
    echo "sharp_binary_host=https://npmmirror.com/mirrors/sharp" >> .npmrc && \
    echo "sharp_libvips_binary_host=https://npmmirror.com/mirrors/sharp-libvips" >> .npmrc && \
    echo "fse_binary_host_mirror=https://npmmirror.com/mirrors/fsevents" >> .npmrc

# Install backend dependencies
RUN npm ci --omit=dev

# Copy backend source
COPY backend/ ./

FROM node:18-alpine AS frontend-builder

# 使用阿里云镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# Set working directory for frontend
WORKDIR /app/frontend

# Copy frontend package files
COPY frontend/package*.json ./

# 配置npm镜像源（兼容npm 9+）
RUN echo "registry=https://registry.npmmirror.com" > .npmrc && \
    echo "dist-url=https://npmmirror.com/mirrors/node" >> .npmrc && \
    echo "sass_binary_site=https://npmmirror.com/mirrors/node-sass" >> .npmrc && \
    echo "electron_mirror=https://npmmirror.com/mirrors/electron/" >> .npmrc && \
    echo "puppeteer_download_host=https://npmmirror.com/mirrors" >> .npmrc && \
    echo "chromedriver_cdnurl=https://npmmirror.com/mirrors/chromedriver" >> .npmrc && \
    echo "operadriver_cdnurl=https://npmmirror.com/mirrors/operadriver" >> .npmrc && \
    echo "phantomjs_cdnurl=https://npmmirror.com/mirrors/phantomjs" >> .npmrc && \
    echo "selenium_cdnurl=https://npmmirror.com/mirrors/selenium" >> .npmrc && \
    echo "node_inspector_cdnurl=https://npmmirror.com/mirrors/node-inspector" >> .npmrc && \
    echo "sqlite3_binary_site=https://npmmirror.com/mirrors/sqlite3" >> .npmrc && \
    echo "sharp_binary_host=https://npmmirror.com/mirrors/sharp" >> .npmrc && \
    echo "sharp_libvips_binary_host=https://npmmirror.com/mirrors/sharp-libvips" >> .npmrc && \
    echo "fse_binary_host_mirror=https://npmmirror.com/mirrors/fsevents" >> .npmrc

# Install frontend dependencies
RUN npm ci

# Copy frontend source
COPY frontend/ ./

# Build frontend for production
RUN npm run build

# Final production image - 使用官方镜像+Docker加速器
FROM node:18-alpine

# 使用阿里云镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# Install runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    sqlite \
    tzdata \
    curl

# Set timezone
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create app user
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy backend from builder
COPY --from=backend-builder --chown=appuser:appgroup /app/backend ./backend

# Copy built frontend from builder
COPY --from=frontend-builder --chown=appuser:appgroup /app/frontend/dist ./frontend/dist

# Create necessary directories
RUN mkdir -p /app/uploads /app/logs && \
    chown -R appuser:appgroup /app/uploads /app/logs

# Switch to app user
USER appuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => { process.exit(1) })"

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "backend/src/app.js"]